#!/usr/bin/env bash
# Script to start the docker-compose stack for development.

set -euo pipefail

. "$(dirname "${BASH_SOURCE[0]}")/lib.sh"

function up {
  # Delete the database volumes. This doesn't remove the build caches.
  local drop_db=false

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --drop-db) drop_db=true ;;
      *) die "Unknown option: $1" ;;
    esac
    shift
  done

  if [[ "$drop_db" == "true" ]]; then
    drop_db
  fi

  step exec docker compose up --no-log-prefix
}

function down {
  # Delete the database volumes. This doesn't remove the build caches.
  local drop_db=false

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --drop-db) drop_db=true ;;
      *) die "Unknown option: $1" ;;
    esac
    shift
  done

  if [[ "$drop_db" == "true" ]]; then
    drop_db
  else
    step docker compose down
  fi
}

function drop_db {
  info "Dropping databases..."

  # It's important to stop all containers to make sure they shut down cleanly.
  # Also, `valkey` stores its data in RAM, so to drop its "database" we need
  # to stop its container.
  #
  # We aren't using `--volumes` parameter with the `docker compose down` because
  # we don't want to delete the build caches, which are also stored in volumes.
  # Instead we remove only DB data volumes separately.
  step docker compose down

  step docker volume rm \
    philomena_postgres_data \
    philomena_opensearch_data
}

subcommand="${1:-}"
shift || true

case "$subcommand" in
  up) up "$@" ;;
  down) down "$@" ;;
  *)
    die "See the available sub-commands in ${BASH_SOURCE[0]}"
    ;;
esac
